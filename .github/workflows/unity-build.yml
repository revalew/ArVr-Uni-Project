name: Build Unity Project and Create Release

on:
  push:
    tags:
      - '*' # Push events to every tag
  workflow_dispatch: # Allows manual triggering

jobs:
  buildAndroid:
    name: Build for Android
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to include tags and commit messages
          lfs: true
      
      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-Android-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-Android-
      
      # Build
      - name: Build Unity project for Android
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: Android
          buildName: ARVRUniProject
          buildMethod: UnityBuilder.BuildAndroid
          allowDirtyBuild: true # Allow building even if there are uncommitted changes
      
      # Archive the build artifacts
      - name: Archive Android build artifacts
        run: |
          mkdir -p artifacts/Android
          cp -r build/Android/* artifacts/Android/
          tar -czf android-build.tar.gz -C artifacts .
      
      # Upload build artifacts
      - name: Upload Android build
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: android-build.tar.gz
          retention-days: 3
  
  buildiOS:
    name: Build for iOS
    runs-on: macos-latest # iOS builds must run on macOS
    
    permissions:
      contents: write
    
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to include tags
          lfs: true
      
      # Cache
      - uses: actions/cache@v3
        with:
          path: Library
          key: Library-iOS-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-iOS-
      
      # Build
      - name: Build Unity project for iOS
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: iOS
          buildName: ARVRUniProject
          buildMethod: UnityBuilder.BuildiOS
          allowDirtyBuild: true # Allow building even if there are uncommitted changes
      
      # Archive the build artifacts
      - name: Archive iOS build artifacts
        run: |
          mkdir -p artifacts/iOS
          cp -r build/iOS/* artifacts/iOS/
          tar -czf ios-build.tar.gz -C artifacts .
      
      # Upload build artifacts
      - name: Upload iOS build
        uses: actions/upload-artifact@v4
        with:
          name: ios-artifacts
          path: ios-build.tar.gz
          retention-days: 3

  # Create GitHub Release with the built artifacts
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required for creating GitHub Releases
    needs:
      - buildAndroid
      - buildiOS
    
    steps:
      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history to include tags and commit messages
      
      # Download Android artifacts
      - name: Download Android artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-artifacts
          path: android
      
      # Download iOS artifacts
      - name: Download iOS artifacts
        uses: actions/download-artifact@v4
        with:
          name: ios-artifacts
          path: ios
      
      # Fetch and format commit messages for changelog
      - name: Fetch and format commit messages
        id: get_commits
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found. Using all commits for changelog."
            FORMATTED_COMMITS=$(git log --pretty=format:"- %s" --reverse)
          else
            echo "Previous tag: $PREVIOUS_TAG"
            echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV
            
            # Fetch commit messages only, excluding commit IDs
            COMMITS=$(git log $PREVIOUS_TAG..HEAD --pretty=format:"%s" --reverse)
            echo "Commit messages between $PREVIOUS_TAG and current tag:"
            echo "$COMMITS"
            
            # Initialize formatted commits variable
            FORMATTED_COMMITS=""
            COUNTER=1
            
            # Process each commit
            while IFS= read -r commit || [ -n "$commit" ]; do
              if [ -n "$commit" ]; then
                FORMATTED_COMMITS+=$'\n'"- commit ${COUNTER}:"
                IFS=';' read -ra SUBCOMMITS <<< "$commit"
                for subcommit in "${SUBCOMMITS[@]}"; do
                  # Remove version pattern (e.g., "(version X.Y.Z)")
                  CLEANED_SUBCOMMIT=$(echo "$subcommit" | sed -E 's/\s*\(version [0-9]+\.[0-9]+\.[0-9]+\)//g')
                  FORMATTED_COMMITS+=$'\n'"  - ${CLEANED_SUBCOMMIT}"
                done
                ((COUNTER++))
              fi
            done <<< "$COMMITS"
          fi
          
          echo "FORMATTED_COMMITS<<EOF" >> $GITHUB_ENV
          echo -e "$FORMATTED_COMMITS" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      # Create the release with changelog
      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create '${{ github.ref_name }}' \
          --repo '${{ github.repository }}' \
          --title 'ARVRUniProject ${{ github.ref_name }}' \
          --notes "# ARVRUniProject ${{ github.ref_name }}
          
          Unity AR/VR University Project Release
          
          ## Changes:
          
          ${{ env.FORMATTED_COMMITS }}"
      
      # Upload artifacts to the GitHub Release
      - name: Upload artifacts to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload '${{ github.ref_name }}' \
          android/android-build.tar.gz ios/ios-build.tar.gz \
          --repo '${{ github.repository }}'